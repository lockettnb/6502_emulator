
2018/01/12 
The disassemble uses an array [0..255] with all the text for all the valid
 instructions listed. If the value is not a valid instruction a "data byte"
or "db" is listed at that array value. If the instruction is a multibyte
instruction the opcode text will contain a 'n' to signify each byte of 
the address value.

For example:
        LDA #n      -- two byte instruction
        LDA nn,X    -- three byte instruction

The disassemble reads the opcode text array with the opcode as an index.
    opcode <-- read memory at address
    op_text <-- opcodes[opcode]

If the instruction is a single byte instruction we are done.  

If it is a data byte we replace the 'n' in the opcode text with the value of
the byte at that address location:
   sprintf(op_text, ".db $%02x", mread(addr));

If the instruction is a multi-byte instruction we scan the opcode text
looking of 'n' two determine the opcode size (2 or 3).  Then we replace
the 'n' with the one byte or two byte address value. 

For a two byte instruction: 
        sprintf(address_text, "$%02x", mread(addr+1));
        str_replace(op_text, "n+", address_text);

The disassembled text is returns in the dline buffer and the opcode
size as the return value.

         
